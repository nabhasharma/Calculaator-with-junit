package nacro;
public class Calculator {
	int a;
	int b;
	public Calculator() {
	}
	
	

	public int subtract(int a, int b) {
	return a - b;
	}
	
	public long multiply(int a, int b) {
	return a * b;
	}
	
	public double divide(int a, int b) {
	double result;
	if (b == 0) {
	throw new IllegalArgumentException("Divisor cannot divide by zero");
	} else {
	result = Double.valueOf(a)/Double.valueOf(b);
	}
	return result;
	}

	public long add(int a, int b) {
		// TODO Auto-generated method stub
		return a+b;
	}



	
	}

	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
package nacro;
import nacro.Calculator;
import org.junit.Test;
import org.junit.Assert;
import org.junit.Before;
public class CalculatorTest {
    private Calculator calc;
    @Before
    public void setUp() {
        calc = new Calculator();
    }
    @Test
    public void testAdd() {
        int a = 15;
        int b = 20;
        int expectedResult = 35;
        long result = calc.add(a, b);
        Assert.assertEquals(expectedResult, result);;
    }
    @Test
    public void testSubtract() {
        int a = 25;
        int b = 20;
        int expectedResult = 5;
        long result = calc.subtract(a, b);
        Assert.assertEquals(expectedResult, result);
    }
    @Test
    public void testMultiply() {
        int a = 10;
        int b = 25;
        long expectedResult = 250;
        long result = calc.multiply(a, b);
        Assert.assertEquals(expectedResult, result);;
    }
    @Test
    public void testDivide() {
        int a = 56;
        int b = 10;
        double expectedResult = 5.6;
        double result = calc.divide(a, b);
        Assert.assertEquals(expectedResult, result,0.00005);
    }
    @Test(expected = IllegalArgumentException.class)
    public void testDivideByZero() {
        int a = 15;
        int b = 0;
        calc.divide(a, b);
    }}
